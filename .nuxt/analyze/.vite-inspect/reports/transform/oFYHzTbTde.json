{
  "resolvedId": "D:/Programmer Force Training/build for mashood/Student-Education-System-frontend/mixins/screenshot.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import html2canvas from \"html2canvas\";\r\nexport default function screenshot () {\r\n      let  frames = [];\r\n      let intervalId;\r\n\r\n\r\n\r\n    async function takeScreenshot() {\r\n            intervalId = setInterval(takeScreenshotOnLoop , 10000)\r\n    }  \r\n\r\n    async function takeScreenshotOnLoop() {\r\n        const { scrollX, scrollY, innerWidth, innerHeight } = window;\r\n    \r\n        // Calculate the visible area after scrolling\r\n        const visibleArea = {\r\n            x: scrollX,\r\n            y: scrollY,\r\n            width: innerWidth,\r\n            height: innerHeight\r\n        };\r\n    \r\n        // Capture the screenshot of the visible area\r\n        const canvas = await html2canvas(document.documentElement, visibleArea);\r\n    \r\n        const imageUrl = canvas.toDataURL(); // Get the base64 encoded image URL\r\n        frames.push(imageUrl); // Store the image URL in the frames array\r\n    \r\n        console.log('Screenshot taken', frames); // Output frames array for debugging or tracking\r\n    \r\n        // Call takeScreenshotOnLoop again after a delay\r\n    }\r\n    \r\n\r\n     function stopCapture() {\r\n        clearInterval(intervalId);\r\n    }\r\n    return {\r\n        takeScreenshot,\r\n        stopCapture,\r\n        frames,\r\n    }\r\n}",
      "start": 1709725920485,
      "end": 1709725920511,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709725920511,
      "end": 1709725920511,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709725920511,
      "end": 1709725920512,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709725920512,
      "end": 1709725920512,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709725920512,
      "end": 1709725920512,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709725920512,
      "end": 1709725920512,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709725920512,
      "end": 1709725920512,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709725920512,
      "end": 1709725920512,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709725920512,
      "end": 1709725920512,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709725920512,
      "end": 1709725920512,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709725920512,
      "end": 1709725920512,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { setInterval } from '#app/compat/interval';\nimport html2canvas from \"html2canvas\";\r\nexport default function screenshot () {\r\n      let  frames = [];\r\n      let intervalId;\r\n\r\n\r\n\r\n    async function takeScreenshot() {\r\n            intervalId = setInterval(takeScreenshotOnLoop , 10000)\r\n    }  \r\n\r\n    async function takeScreenshotOnLoop() {\r\n        const { scrollX, scrollY, innerWidth, innerHeight } = window;\r\n    \r\n        // Calculate the visible area after scrolling\r\n        const visibleArea = {\r\n            x: scrollX,\r\n            y: scrollY,\r\n            width: innerWidth,\r\n            height: innerHeight\r\n        };\r\n    \r\n        // Capture the screenshot of the visible area\r\n        const canvas = await html2canvas(document.documentElement, visibleArea);\r\n    \r\n        const imageUrl = canvas.toDataURL(); // Get the base64 encoded image URL\r\n        frames.push(imageUrl); // Store the image URL in the frames array\r\n    \r\n        console.log('Screenshot taken', frames); // Output frames array for debugging or tracking\r\n    \r\n        // Call takeScreenshotOnLoop again after a delay\r\n    }\r\n    \r\n\r\n     function stopCapture() {\r\n        clearInterval(intervalId);\r\n    }\r\n    return {\r\n        takeScreenshot,\r\n        stopCapture,\r\n        frames,\r\n    }\r\n}",
      "start": 1709725920512,
      "end": 1709725920513,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AACD,CAAC;AACD,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACntE,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjF,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1E,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClG,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1709725920513,
      "end": 1709725920513,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709725920513,
      "end": 1709725920513,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709725920513,
      "end": 1709725920513,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709725920513,
      "end": 1709725920513,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709725920513,
      "end": 1709725920514,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709725920514,
      "end": 1709725920514,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709725920514,
      "end": 1709725920514,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709725920514,
      "end": 1709725920514,
      "order": "normal"
    }
  ]
}
